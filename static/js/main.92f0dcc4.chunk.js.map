{"version":3,"sources":["components/Modul.tsx","data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Page","className","src","alt","this","props","title","sound","description","map","line","Component","lelki_modulok","id","App","routes","lelki_modul","i","path","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAYaA,EAAb,iLAEI,OACE,6BACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAI,wBAAwBC,IAAI,UAIzC,wBAAIF,UAAU,cAAd,IAA6BG,KAAKC,MAAMC,MAAxC,KAEA,6BAEA,kBAAC,IAAD,CACEL,UAAU,SAEVC,IAAG,kBAAaE,KAAKC,MAAME,SAG7B,yBAAKN,UAAU,eACZG,KAAKC,MAAMG,YAAYC,KAAI,SAAAC,GAC1B,OAAO,2BAAIA,OAIf,yBAAKT,UAAU,UACb,+EA3BV,GAA0BU,aCLbC,EAA+B,CAC1C,CACEC,GAAI,oBACJP,MAAO,iCACPE,YAAa,CACX,sBACA,gEACA,iFACA,iFACA,+DACA,gFACA,sDACA,6EACA,uEAEFD,MAAO,sCAET,CACEM,GAAI,uBACJP,MAAO,2BACPE,YAAa,CACX,0QACA,iHACA,yuBACA,mhBAEFD,MAAO,gCCkEIO,E,iLAzFX,IAAMC,EAASH,EAAcH,KAAI,SAACO,EAAaC,GAAd,OAC/B,kBAAC,IAAD,CAAOC,KAAI,WAAMF,EAAYH,KAC3B,kBAAC,EAAD,CAAMP,MAAOU,EAAYV,MAAOE,YAAaQ,EAAYR,YAAaD,MAAOS,EAAYT,YAI7F,OACE,yBAAKN,UAAU,OAGb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAQkB,SAAQ,WAAMC,qBACpB,kBAAC,IAAD,KACGL,EAuBD,kBAAC,IAAD,CAAOG,KAAK,KACV,uBAAGjB,UAAU,cAAb,kC,GAvCEU,aCIEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92f0dcc4.chunk.js","sourcesContent":["import 'react-h5-audio-player/lib/styles.css';\r\nimport './Modul.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\n\r\ntype PageProps = {\r\n  title: string;\r\n  description: string[];\r\n  sound: string;\r\n};\r\n\r\nexport class Page extends Component<PageProps, {}> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Banner\">\r\n          <div className=\"BannerContent\">\r\n            <img src=\"./img/nyakk_zold2.png\" alt=\"asd\"></img>\r\n          </div>\r\n        </div>\r\n\r\n        <h1 className=\"PageHeader\"> {this.props.title} </h1>\r\n\r\n        <br />\r\n\r\n        <AudioPlayer\r\n          className=\"player\"\r\n          // autoPlay\r\n          src={`./sound/${this.props.sound}`}\r\n        />\r\n\r\n        <div className=\"description\">\r\n          {this.props.description.map(line => {\r\n            return <p>{line}</p>;\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"footer\">\r\n          <p>Téli tábor - 2020. február 13-16.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export type lelki_modul = {\r\n  id: string;\r\n  title: string;\r\n  description: string[];\r\n  sound: string;\r\n};\r\n\r\nexport const lelki_modulok: lelki_modul[] = [\r\n  {\r\n    id: 'az-ur-a-te-orizod',\r\n    title: 'Az Úr a te őriződ',\r\n    description: [\r\n      'Zarándokének.',\r\n      'Tekintetem a hegyekre emelem: Honnan jön segítségem?',\r\n      'Segítségem az ÚRtól jön, aki az eget és a földet alkotta.',\r\n      'Nem engedi, hogy lábad megtántorodjék, nem szunnyad őriződ.',\r\n      'Bizony nem szunnyad, nem alszik Izráel őrizője!',\r\n      'Az ÚR a te őriződ, az ÚR a te oltalmad jobb kezed felől.',\r\n      'Nem árt neked nappal a nap, sem éjjel a hold.',\r\n      'Az ÚR megőriz téged minden bajtól, megőrzi életedet.',\r\n      'Megőriz az ÚR jártodban-keltedben, most és mindenkor.',\r\n    ],\r\n    sound: 'Az_Úr_a_te_őriződ.m4a',\r\n  },\r\n  {\r\n    id: 'vissza-a-termeszetbe',\r\n    title: 'Vissza a természetbe!',\r\n    description: [\r\n      'Van valami varázslatos, semmihez sem fogható abban, ha kimegyünk a természetbe. Még ha a belvárosban élsz is, és már régóta alig látsz egy zöld csomót, azért csak van valahol a közelben egy park, ahová lemehetsz.',\r\n      'Ryan egy családi zűr kellős közepén ismerte meg a természet gyógyító erejét.',\r\n      'Valamikor középiskolás koromban egy elég nehéz időszakon mentem keresztül. Úgy tűnt, minden összeomlik körülöttem... Ekkor találtam rá egy különleges kis helyre a folyóparton. Egy öreg farmer földjének végén volt, néhány félreeső fa között, és messziről nem lehetett észrevenni, hogy van ott valami. Ez lett a rejtekhelyem. Senki sem volt a környéken, nem lehetett hallani az embereket. Gyönyörű volt. Ahogy ott úszkáltam, békében éreztem magam a természettel. Ha feszült voltam, mindig oda mentem. Úgy éreztem, mintha az életem újra visszazökkenne a normális kerékvágásba.',\r\n      'Van, aki a problémáira a gyülekezetében, szervezett keretek között keres megoldást. Én is hiszek Istenben. De néha egyszerűen már arra is nehezen veszem rá magam, hogy elinduljak, és közösségbe menjek, mert ha elmegyek, mindenki azt mondja: „Ó, csak légy nyugodt. Meg fog oldódni az egész! Csak legyen hited! Minden rendben lesz a családodban.” Hát, szerintem ez süket duma. Van, ami nem oldódik meg. Az én családom egy katasztrófa...',\r\n    ],\r\n    sound: 'Vissza_a_természetbe.m4a',\r\n  },\r\n];\r\n","import './App.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport { Page } from './components/Modul';\r\nimport { lelki_modulok } from './data';\r\n\r\nclass App extends Component<{}, {}> {\r\n  render() {\r\n    const routes = lelki_modulok.map((lelki_modul, i) => (\r\n      <Route path={`/${lelki_modul.id}`}>\r\n        <Page title={lelki_modul.title} description={lelki_modul.description} sound={lelki_modul.sound} />\r\n      </Route>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <Banner /> */}\r\n\r\n        <div className=\"AppContent\">\r\n          <Router basename={`/${process.env.PUBLIC_URL}`}>\r\n            <Switch>\r\n              {routes}\r\n              {/* If the current URL is /about, this route is rendered\r\n            while the rest are ignored */}\r\n              {/* <Route path=\"/about\">\r\n                <p>Hello from about</p>\r\n              </Route>\r\n\r\n              {/* Note how these two routes are ordered. The more specific\r\n            path=\"/contact/:id\" comes before path=\"/contact\" so that\r\n          route will render when viewing an individual contact */}\r\n              {/* <Route path=\"/contact/:id\">\r\n                <p>Hello from contact id</p>\r\n              </Route>\r\n              <Route path=\"/contact\">\r\n                <p>Hello from contact</p>\r\n              </Route> */}\r\n\r\n              {/* If none of the previous routes render anything,\r\n            this route acts as a fallback.\r\n            \r\n            Important: A route with path=\"/\" will *always* match\r\n            the URL because all URLs begin with a /. So that's\r\n              why we put this one last of all*/}\r\n              <Route path=\"/\">\r\n                <p className=\"PageHeader\">Téli tábor 2020</p>\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n          {/* <h1>Téli tábor 2020</h1> */}\r\n          {/* <Router basename=\"/\">\r\n            <div>\r\n            <Switch>\r\n            {/* <Route path=\"/users\">\r\n            <Page title=\"Users\" />\r\n            </Route> \r\n            <p>{lelki_modulok.length}</p>\r\n            \r\n            <Route path=\"/a\">\r\n                  <p>A aloldal!</p>\r\n                  {/* <Page title=\"Asd\" description={['asd']} sound=\"asd\"></Page> \r\n                </Route>\r\n                <Route path=\"/b\">\r\n                  <p>B aloldal!</p>\r\n                  {/* <Page title=\"Asd\" description={['asd']} sound=\"asd\"></Page> \r\n                </Route>\r\n                <Route path=\"/asd\">\r\n                  <Page title=\"Asd\" description={['asd']} sound=\"asd\"></Page>\r\n                </Route>\r\n\r\n                {/* {routes} */}\r\n          {/* {lelki_modulok.map(lelki_modul => {\r\n                  return (\r\n                    <>\r\n                      <Route path={`/${lelki_modul.id}`}>\r\n                        <Page\r\n                          title={lelki_modul.title}\r\n                          description={lelki_modul.description}\r\n                          sound={lelki_modul.sound}\r\n                        />\r\n                      </Route>\r\n                    </>\r\n                  );\r\n                })} */}\r\n\r\n          {/* <Route path=\"/\">\r\n                  <Page title=\"Mit jelent számodra a Barátság?\" />\r\n                </Route>\r\n              </Switch>\r\n            </div>\r\n          </Router> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}